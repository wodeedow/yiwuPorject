// Generated by the ManagedUPnP Framework
// http://managedupnp.codeplex.com Class Name
//

// For Root Device: JC5 Network Driver (urn:schemas-upnp-org:device:KnitterNetworkDriver:1) - Serial: 0579001001
// Using Device: JC5 Network Driver (urn:schemas-upnp-org:device:KnitterNetworkDriver:1)
// Using Device: JC5 Network Driver (urn:schemas-upnp-org:device:KnitterNetworkDriver:1)
//
// On: 2013/7/27 21:03:16
//
// Class Name: JC5NetworkDriver
// Namespace Name: UPnPJC5NetworkDriver.Devices
// Class Scope: Public
// Partial Class: 

using System;
using System.Collections;
using ManagedUPnP;
using UPnPJC5NetworkDriver.Services;

namespace UPnPJC5NetworkDriver.Devices
{
	/// <summary>
	/// Encapsulates a specific Device class for the JC5 Network Driver device (urn:schemas-upnp-org:device:KnitterNetworkDriver:1).
	/// </summary>
	public class JC5NetworkDriver : Device
	{
		#region Protected Constants

		/// <summary>
		/// Stores the constant ID value for child service KnitterControl1.
		/// </summary>
		protected const string csService_KnitterControl1ID = "urn:upnp-org:serviceId:KnitterControl1";

		#endregion

		#region Public Constants

		/// <summary>
		/// Gets the device type string for this device.
		/// </summary>
		public const string DeviceType = "urn:schemas-upnp-org:device:KnitterNetworkDriver:1";

		/// <summary>
		/// Gets the device model name string for this device.
		/// </summary>
		public const string DeviceModelName = "JC5 Network Driver";

		#endregion

		#region Protected Locals

		/// <summary>
		/// Gets the device check flags that were initially used to created the device object.
		/// </summary>
		protected DeviceCheckFlags mdcDeviceCheck;

		#endregion

		#region Initialisation

		/// <summary>
		/// Creates a new instance of the JC5 Network Driver device from a base device.
		/// </summary>
		/// <param name="device">The base device to create the JC5 Network Driver device from.</param>
		/// <param name="deviceCheck">The flags specifying what parameters to check of the base device before allowing creation of the JC5 Network Driver device.</param>
		public JC5NetworkDriver(Device device, DeviceCheckFlags deviceCheck)
			: base(device)
		{
			if (!CanAccess(device, deviceCheck))
				throw new NotSupportedException();

			mdcDeviceCheck = deviceCheck;
		}

		#endregion

		#region Public Static Methods

		/// <summary>
		/// Determines if a JC5 Network Driver device can use a device as its base.
		/// </summary>
		/// <param name="device">The base device to test for compatible functionality.</param>
		/// <param name="deviceCheck">The flags specifying what parameters to check of the base device.</param>
		/// <returns>True if the device can be used as a base device, false otherwise.</returns>
		public static bool CanAccess(Device device, DeviceCheckFlags deviceCheck)
		{
			return
				((deviceCheck & DeviceCheckFlags.DeviceType) == DeviceCheckFlags.None || device.Type == DeviceType) &&
				((deviceCheck & DeviceCheckFlags.DeviceModelName) == DeviceCheckFlags.None || device.ModelName == DeviceModelName);
		}

		/// <summary>
		/// Returns JC5NetworkDriver objects for each compatible device in a collection of Devices as an array.
		/// </summary>
		/// <param name="devices">The base devices to create the JC5NetworkDriver object for.</param>
		/// <param name="deviceCheck">The flags specifying what parameters to check of the base devices.</param>
		/// <returns>An array of JC5NetworkDriver objects containing the newly created devices.</returns>
		public static JC5NetworkDriver[] FromDevices(ManagedUPnP.Devices devices, DeviceCheckFlags deviceCheck)
		{
			ArrayList lalReturn = new ArrayList();

			foreach(Device ldDevice in devices)
				if (ldDevice != null && CanAccess(ldDevice, deviceCheck))
					lalReturn.Add(new JC5NetworkDriver(ldDevice, deviceCheck));

			return (JC5NetworkDriver[])lalReturn.ToArray(typeof(JC5NetworkDriver));
		}

		/// <summary>
		/// Returns JC5NetworkDriver objects for each compatible device found in a device and all its children.
		/// </summary>
		/// <param name="baseDevice">The base device and recursive children to consider.</param>
		/// <param name="deviceCheck">The flags specifying what parameters to check of the base devices.</param>
		/// <returns>An array of JC5NetworkDriver objects containing the newly created devices.</returns>
		public static JC5NetworkDriver[] SearchAndCreate(Device baseDevice, DeviceCheckFlags deviceCheck)
		{
			return FromDevices(baseDevice.DevicesByType(DeviceType), deviceCheck);
		}

		/// <summary>
		/// Returns JC5NetworkDriver objects for each compatible device discovered in a synchronous manner.
		/// </summary>
		/// <param name="deviceCheck">The flags specifying what parameters to check discovered devices.</param>
		/// <returns>An array of JC5NetworkDriver objects containing the newly created devices.</returns>
		public static JC5NetworkDriver[] DiscoverAndCreate(DeviceCheckFlags deviceCheck)
		{
			return FromDevices(Discovery.FindDevices(DeviceType), deviceCheck);
		}

		#endregion

		#region Public Properties

		/// <summary>
		/// Gets a new KnitterControl1 (urn:schemas-upnp-org:service:KnitterControl:1) child Service for the device.
		/// </summary>
		public KnitterControl1 KnitterControl1Service
		{
			get
			{
				return new KnitterControl1(Services[csService_KnitterControl1ID]);
			}
		}

		#endregion
	}
}
