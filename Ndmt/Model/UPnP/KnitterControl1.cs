// Generated by the ManagedUPnP Framework
// http://managedupnp.codeplex.com
//

// For Root Device: JC5 Network Driver (urn:schemas-upnp-org:device:KnitterNetworkDriver:1) - Serial: 0579001001
// For Device: JC5 Network Driver (urn:schemas-upnp-org:device:KnitterNetworkDriver:1)
// Using Service: urn:upnp-org:serviceId:KnitterControl1 (urn:schemas-upnp-org:service:KnitterControl:1)
//
// On: 2013/7/27 21:03:16
//
// Class Name: KnitterControl1
// Namespace Name: UPnPJC5NetworkDriver.Services
// Class Scope: Public
// Partial Class: 
// Test State Vars for Properties: True

using System;
using System.Collections;
using ManagedUPnP;

namespace UPnPJC5NetworkDriver.Services
{
	/// <summary>
	/// Encapsulates a specific Service class for the KnitterControl1 (urn:schemas-upnp-org:service:KnitterControl:1) service.
	/// </summary>
	public class KnitterControl1 : Service
	{
		#region Protected Constants

		/// <summary>
		/// The string value for the allowed value 0 of the JC5WorkingStatus state variable.
		/// </summary>
		protected const string csAllowedVal_JC5WorkingStatus__0 = "0";

		/// <summary>
		/// The string value for the allowed value 1 of the JC5WorkingStatus state variable.
		/// </summary>
		protected const string csAllowedVal_JC5WorkingStatus__1 = "1";

		/// <summary>
		/// The string value for the allowed value 2 of the JC5WorkingStatus state variable.
		/// </summary>
		protected const string csAllowedVal_JC5WorkingStatus__2 = "2";

		/// <summary>
		/// The name for the JC5WorkingStatus state variable.
		/// </summary>
		protected const string csStateVar_JC5WorkingStatus = "JC5WorkingStatus";

		/// <summary>
		/// The name for the ExStorageMounted state variable.
		/// </summary>
		protected const string csStateVar_ExStorageMounted = "ExStorageMounted";

		/// <summary>
		/// The name for the CanMountExStorage state variable.
		/// </summary>
		protected const string csStateVar_CanMountExStorage = "CanMountExStorage";

		/// <summary>
		/// The name for the FriendlyName state variable.
		/// </summary>
		protected const string csStateVar_FriendlyName = "FriendlyName";

		/// <summary>
		/// The name for the MountExternalStorage action.
		/// </summary>
		protected const string csAction_MountExternalStorage = "MountExternalStorage";

		/// <summary>
		/// The name for the UnmountExternalStorage action.
		/// </summary>
		protected const string csAction_UnmountExternalStorage = "UnmountExternalStorage";

		/// <summary>
		/// The name for the SetFriendlyName action.
		/// </summary>
		protected const string csAction_SetFriendlyName = "SetFriendlyName";

		/// <summary>
		/// The name for the Notify action.
		/// </summary>
		protected const string csAction_Notify = "Notify";

		/// <summary>
		/// The name for the Reset action.
		/// </summary>
		protected const string csAction_Reset = "Reset";

		/// <summary>
		/// The name for the Restart action.
		/// </summary>
		protected const string csAction_Restart = "Restart";

		#endregion

		#region Public Constants

		/// <summary>
		/// Gets the service type identifier for the KnitterControl1 service.
		/// </summary>
		public const string ServiceType = "urn:schemas-upnp-org:service:KnitterControl:1";
        //服务类型的一般格式为： urn:schemas-upnp-org:service:serviceType:version。
		#endregion

		#region Public Enumerations

		/// <summary>
		/// Gets the enumeration type to hold a value for the JC5WorkingStatus state variable.
		/// </summary>
		public enum JC5WorkingStatusEnum
		{
			/// <summary>
			/// Gets the JC5WorkingStatus state var '_0' value.
			/// </summary>
			_0,

			/// <summary>
			/// Gets the JC5WorkingStatus state var '_1' value.
			/// </summary>
			_1,

			/// <summary>
			/// Gets the JC5WorkingStatus state var '_2' value.
			/// </summary>
			_2,

			/// <summary>
			/// Value describing an invalid or unknown JC5WorkingStatus value.
			/// </summary>
			_Unknown
		}

		#endregion

		#region Initialisation

		/// <summary>
		/// Creates a new instance of the KnitterControl1 service from a base service.
		/// </summary>
		/// <param name="service">The base service to create the KnitterControl1 service from.</param>
		public KnitterControl1(Service service)
			: base(service)
		{
			if (!CanAccess(service))
				throw new NotSupportedException();
		}

		#endregion Upnp-JC5-NetworkDriver-1_0-0579001001

		#region Public Static Methods

		/// <summary>
		/// Determines if a service is compatible with this service class.
		/// </summary>
		/// <param name="service">The base service to test for compatibility with.</param>
		/// <returns>True if the service type is compatible, false otherwise.</returns>
		public static bool CompatibleWith(Service service)
		{
			return service.ServiceTypeIdentifier == ServiceType;
		}

		/// <summary>
		/// Returns KnitterControl1 objects for each compatible service in a collection of Services as an array.
		/// </summary>
		/// <param name="services">The base services to create the KnitterControl1 object for.</param>
		/// <returns>An array of KnitterControl1 objects containing the newly created services.</returns>
		public static KnitterControl1[] FromServices(ManagedUPnP.Services services)
		{
			ArrayList lalReturn = new ArrayList();

			foreach(Service lsService in services)
				if (lsService != null && CompatibleWith(lsService))
					lalReturn.Add(new KnitterControl1(lsService));

			return (KnitterControl1[])lalReturn.ToArray(typeof(KnitterControl1));
		}

		/// <summary>
		/// Returns KnitterControl1 objects for each compatible service found in a devices child services.
		/// </summary>
		/// <param name="baseDevice">The base device to consider.</param>
		/// <param name="includingChildDevices">True to search all child devices recursively, false to use direct children only.</param>
		/// <returns>An array of KnitterControl1 objects containing the newly created services.</returns>
		public static KnitterControl1[] SearchAndCreate(Device baseDevice, bool includingChildDevices)
		{
			return FromServices(new ManagedUPnP.Services(baseDevice, ServiceType, includingChildDevices));
		}

		/// <summary>
		/// Returns KnitterControl1 objects for each compatible services discovered in a synchronous manner以同步的方式.
		/// </summary>
		/// <returns>An array of KnitterControl1 objects containing the newly created services.</returns>
		public static KnitterControl1[] DiscoverAndCreate()
		{
			return FromServices(Discovery.FindServices(ServiceType));
		}

		#endregion

		#region Event Handlers

		/// <summary>
		/// Occurs when the service notifies that the JC5WorkingStatus state variable has changed its value.
		/// </summary>
		public event StateVariableChangedEventHandler<JC5WorkingStatusEnum> JC5WorkingStatusChanged;

		/// <summary>
		/// Occurs when the service notifies that the ExStorageMounted state variable has changed its value.
		/// </summary>
		public event StateVariableChangedEventHandler<Boolean> ExStorageMountedChanged;

		/// <summary>
		/// Occurs when the service notifies that the CanMountExStorage state variable has changed its value.
		/// </summary>
		public event StateVariableChangedEventHandler<Boolean> CanMountExStorageChanged;

		/// <summary>
		/// Occurs when the service notifies that the FriendlyName state variable has changed its value.
		/// </summary>
		public event StateVariableChangedEventHandler<String> FriendlyNameChanged;


		#endregion

		#region Event Callers

		/// <summary>
		/// Raises the JC5WorkingStatusChanged event.
		/// </summary>
		/// <param name="e">The event arguments.</param>
		protected virtual void OnJC5WorkingStatusChanged(StateVariableChangedEventArgs<JC5WorkingStatusEnum> e)
		{
			if (JC5WorkingStatusChanged != null)
				JC5WorkingStatusChanged(this, e);
		}

		/// <summary>
		/// Raises the ExStorageMountedChanged event.
		/// </summary>
		/// <param name="e">The event arguments.</param>
        protected virtual void OnExStorageMountedChanged(StateVariableChangedEventArgs<Boolean> e)//能够重载,即在子类中既可以使用基类的方法，也可以使用子类中定义的方法
		{
			if (ExStorageMountedChanged != null)
				ExStorageMountedChanged(this,e);
		}

		/// <summary>
		/// Raises the CanMountExStorageChanged event.
		/// </summary>
		/// <param name="e">The event arguments.</param>
		protected virtual void OnCanMountExStorageChanged(StateVariableChangedEventArgs<Boolean> e)
		{
			if (CanMountExStorageChanged != null)
				CanMountExStorageChanged(this, e);
		}

		/// <summary>
		/// Raises the FriendlyNameChanged event.
		/// </summary>
		/// <param name="e">The event arguments.</param>
		protected virtual void OnFriendlyNameChanged(StateVariableChangedEventArgs<String> e)
		{
			if (FriendlyNameChanged != null)
				FriendlyNameChanged(this, e);
		}

		/// <summary>
		/// Raises the StateVariableChanged event.
		/// </summary>
		/// <param name="a">The event arguments.</param>
		protected override void OnStateVariableChanged(StateVariableChangedEventArgs e)
		{
			try
			{
				// Determine state variable that is changing
				switch(e.StateVarName)
				{
					default:
						break;
					
					case csStateVar_JC5WorkingStatus:
						// Raise the event for the JC5WorkingStatus state variable
						OnJC5WorkingStatusChanged(
							new StateVariableChangedEventArgs<JC5WorkingStatusEnum>(
								csStateVar_JC5WorkingStatus,
								ParseJC5WorkingStatus((string)e.StateVarValue)));               
#region                 
                    //case "JC5WorkingStatus"
                        //     OnJC5WorkingStatusChanged(new StateVariableChangedEventArgs<JC5WorkingStatusEnum>("JC5WorkingStatus",_0))
                        //      状态变量改变时,实例化一个 StateVariableChangedEventArgs<JC5WorkingStatusEnum>类型的对象，该对象有两个属性
                        //，触发JC5WorkingStatusChanged事件！
                        //
                        //  protected virtual void OnJC5WorkingStatusChanged(StateVariableChangedEventArgs<JC5WorkingStatusEnum> e)
                        //{
                        //    if (JC5WorkingStatusChanged != null)
                        //        JC5WorkingStatusChanged(this, e);
                        //}
                        // public StateVariableChangedEventArgs(string stateVarName, T stateVarValue)
                        //{
                        //    msStateVarName = stateVarName;
                        //    mtStateVarValue = stateVarValue;
                        //}  
#endregion
                        break;
					
					case csStateVar_ExStorageMounted:
						// Raise the event for the ExStorageMounted state variable
						OnExStorageMountedChanged(
							new StateVariableChangedEventArgs<Boolean>(
								csStateVar_ExStorageMounted,
								(Boolean)e.StateVarValue));
						break;
					
					case csStateVar_CanMountExStorage:
						// Raise the event for the CanMountExStorage state variable
						OnCanMountExStorageChanged(
							new StateVariableChangedEventArgs<Boolean>(
								csStateVar_CanMountExStorage,
								(Boolean)e.StateVarValue));
						break;
					
					case csStateVar_FriendlyName:
						// Raise the event for the FriendlyName state variable
						OnFriendlyNameChanged(
							new StateVariableChangedEventArgs<String>(
								csStateVar_FriendlyName,
								(String)e.StateVarValue));
						break;
					
				}
			}
			catch (Exception err)
			{
                Ndmt.Model.LogHelper.LogHere("GeneralException", err.Message);
			}

            base.OnStateVariableChanged(e);//父类委托是空的，没效果
          //只调用重写的方法,不写明调用父类的 就不调用

		}

		#endregion

		#region Protected Methods

		/// <summary>
		/// Parses a string value from the JC5WorkingStatus state var and returns the enumeration value for it.
		/// </summary>
		/// <param name="value">The string value to parse.</param>
		/// <returns>The parsed value or JC5WorkingStatusEnum._Unknown if not parsable.</returns>
		protected JC5WorkingStatusEnum ParseJC5WorkingStatus(string value)
		{
			switch(value)
			{
				case csAllowedVal_JC5WorkingStatus__0: return JC5WorkingStatusEnum._0;
				case csAllowedVal_JC5WorkingStatus__1: return JC5WorkingStatusEnum._1;
				case csAllowedVal_JC5WorkingStatus__2: return JC5WorkingStatusEnum._2;
				default: return JC5WorkingStatusEnum._Unknown;
			}
		}

		/// <summary>
		/// Gets the string value for the JC5WorkingStatus state var from its enumeration value.
		/// </summary>
		/// <param name="value">The enumeration value to get the string value for.</param>
		/// <returns>The string value for the enumeration, or string.empty if JC5WorkingStatusEnum._Unknown or out of range.</returns>
		protected string ToStringJC5WorkingStatus(JC5WorkingStatusEnum value)
		{
            //没被调用
			switch(value)
			{
				case JC5WorkingStatusEnum._0: return csAllowedVal_JC5WorkingStatus__0;
				case JC5WorkingStatusEnum._1: return csAllowedVal_JC5WorkingStatus__1;
				case JC5WorkingStatusEnum._2: return csAllowedVal_JC5WorkingStatus__2;
				default: return String.Empty;
			}
		}

		#endregion

		#region Public Methods

		/// <summary>
		/// Executes the MountExternalStorage action.
		/// </summary>
		/// <returns>Out value for the ExStorageMounted action parameter. Default value of 0.</returns>
		public Boolean MountExternalStorage()
		{
			object[] loIn = new object[0];

			object[] loOut = InvokeAction(csAction_MountExternalStorage, loIn);

			return (Boolean)loOut[0];
		}

		/// <summary>
		/// Executes the UnmountExternalStorage action.
		/// </summary>
		/// <returns>Out value for the ExStorageMounted action parameter. Default value of 0.</returns>
		public Boolean UnmountExternalStorage()
		{
			object[] loIn = new object[0];
			object[] loOut = InvokeAction(csAction_UnmountExternalStorage, loIn);
			return (Boolean)loOut[0];
		}

		/// <summary>
		/// Executes the SetFriendlyName action.
		/// </summary>
		/// <param name="friendlyName">In value for the FriendlyName action parameter. Default value of JC5 Network Driver.</param>
		public void SetFriendlyName(String friendlyName)
		{
			object[] loIn = new object[1];

			loIn[0] = friendlyName;
			InvokeAction(csAction_SetFriendlyName, loIn);
		}

		/// <summary>
		/// Executes the Notify action.
		/// </summary>
		/// <returns>Out value for the JC5WorkingStatus action parameter. Default value of 0.</returns>
		public JC5WorkingStatusEnum Notify()
		{
			object[] loIn = new object[0];
			object[] loOut = InvokeAction(csAction_Notify, loIn);
			return ParseJC5WorkingStatus((string)loOut[0]);
		}

		/// <summary>
		/// Executes the Reset action.
		/// </summary>
		public void Reset()
		{
			object[] loIn = new object[0];
			InvokeAction(csAction_Reset, loIn);

		}

		/// <summary>
		/// Executes the Restart action.
		/// </summary>
		public void Restart()
		{
			object[] loIn = new object[0];
			InvokeAction(csAction_Restart, loIn);

		}

		/// <summary>
		/// Determines if a base service can access this service class.
		/// </summary>
		/// <param name="service">The base service to test for compatibility with.</param>
		/// <returns>True if the service can be used to access this class, false otherwise.</returns>
		public override bool CanAccess(Service service)
		{
			return base.CanAccess(service) && CompatibleWith(service);
		}

		#endregion

		#region Public Properties

		/// <summary>
		/// Gets the raw string value for the JC5WorkingStatus state variable. Default value of 0.
		/// </summary>
		public string JC5WorkingStatusString
		{
			get
			{
				return QueryStateVariable<String>(csStateVar_JC5WorkingStatus);
			}
		}

		/// <summary>
		/// Gets the JC5WorkingStatus state variable. Default value of 0.
		/// </summary>
		/// <remarks>Returns JC5WorkingStatusEnum._Unknown on error or if unparsable.</remarks>
		public JC5WorkingStatusEnum JC5WorkingStatus
		{
			get
			{
				try
				{
					return ParseJC5WorkingStatus(JC5WorkingStatusString);
				}
				catch
				{
				}
				return JC5WorkingStatusEnum._Unknown;
			}
		}

		/// <summary>
		/// Gets the ExStorageMounted state variable. Default value of 0.
		/// </summary>
		public Boolean ExStorageMounted
		{
			get
			{
				return QueryStateVariable<Boolean>(csStateVar_ExStorageMounted);
			}
		}

		/// <summary>
		/// Gets the CanMountExStorage state variable. Default value of 0.
		/// </summary>
		public Boolean CanMountExStorage
		{
			get
			{
				return QueryStateVariable<Boolean>(csStateVar_CanMountExStorage);
			}
		}

		/// <summary>
		/// Gets the FriendlyName state variable. Default value of JC5 Network Driver.
		/// </summary>
		public String FriendlyName
		{
			get
			{
				return QueryStateVariable<String>(csStateVar_FriendlyName);
			}
		}

		#endregion
	}
}
